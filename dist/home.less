/// @name each
/// @description
///   provides each loops
/// @argument {Array} @list      List to iterate
/// @argument {Rule}  @callback  Calls the content of the loop

.each(@list, @callback) when (default()) {
  .each-impl_(length(@list), @callback);
}
.each-impl_(@i, @callback) when (@i > 1) {
  .each-impl_((@i - 1), @callback)
}
.each-impl_(@i, @callback) {
  @callback();
  .callback(extract(@list, @i));
}

/// @name for
/// @description
///   provides for loops
/// @argument {Integer} @i         Start of iterations (optional)
/// @argument {Integer} @n         End or number of iterations
/// @argument {Rule}    @callback  Calls the content of the loop

.for(@i, @n, @callback) {
  @callback();
  .callback(@i)
}

.for(@n, @callback) when (isnumber(@n)) {
  .for(0, @n, @callback)
}

.for(@i, @n, @callback) when not (@i = @n - 1) {
  .for((@i + ((@n - @i) / abs(@n - @i))), @n, @callback)
}

/// @name if
/// @description
///   provides if-then-else statements
/// @argument {Condition} @condition  the condition to match
/// @argument {Rule}  @callback  Calls the content of the loop

.if(...) {}
.if(@condition, @callback...) when (@condition) {
  @callback();
  .then();
}
.if(@condition, @callback...) when not(@condition) {
  .else(...){};
  @callback();
  @one:    extract(@condition, 1);
  @two:    extract(@condition, 3);
  @operator: extract(@condition, 2);
  .return(lt) {
    & when (@one < @two) {
      .if(true, @callback);
    }
    & when not (@one < @two) {
      .else();
    }
  }
  .return(lte) {
    & when (@one <= @two) {
      .if(true, @callback);
    }
    & when not(@one <= @two) {
      .else();
    }
  }
  .return(gt) {
    & when (@one > @two) {
      .if(true, @callback);
    }
    & when not(@one > @two) {
      .else();
    }
  }
  .return(gte) {
    & when (@one >= @two) {
      .if(true, @callback);
    }
    & when not(@one >= @two) {
      .else();
    }
  }
  .return(eq) {
    & when (@one = @two) {
      .if(true, @callback);
    }
    & when not(@one = @two) {
      .else();
    }
  }
  .return(neq) {
    & when not(@one = @two) {
      .if(true, @callback);
    }
    & when (@one = @two) {
      .else();
    }
  }
  .return(...) when (default()) {
    .else();
  }
  .return(@operator);
}
/// @name join
/// @description
///   repeat a string with an optional glue
/// @argument {String} @list  the list to join
/// @argument {String} @glue  string to use as a glue (optional)

.join(...) {}
.join(@list) {
  .join(@list, '');
}
.join(@list, @glue) {
  .join(@string, @list, @glue, @n) when (@n >= 0) {
    .-return(@result, @n2) when (@n2 = 0) {
      @return: ~'@{result}';
    }
    .-return(@string, @n);
    @add: extract(@list, @n);
    .join('@{add}@{glue}@{string}', @list, @glue, (@n - 1));
  }
  @last: extract(@list, length(@list));
  .join(@last, @list, @glue, (length(@list) - 1));
}
/// @name repeat
/// @description
///   repeat a string with an optional glue
/// @argument {String} @string  the string to repeat
/// @argument {Srting} @glue    string to use as a glue
/// @argument {Number} @n       number of repeats

.repeat(...) {}
.repeat(@string, @n) {
  .repeat(@string, '', @n);
}
.repeat(@string, @glue, @n) {
    .repeat(@string, @add, @glue, @n) when (@n > 0) {
        .return(@result, @nn) when (@nn = 1) {
          @return: e('@{result}');
        }
        .return(@string, @n);
        .repeat('@{string}@{glue}@{add}', @add, @glue, @n - 1);
    }
    .repeat(@string, @string, @glue, @n);
}
.repeat(@string, @glue, @n) when (@n < 1) {
  @return: e('');
}